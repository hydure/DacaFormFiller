#!/usr/bin/python3

g1145 = "C:/Users/Hydur/OneDrive/Desktop/g-1145.pdf"
i131 = "C:/Users/Hydur/OneDrive/Desktop/i-131.pdf"
g28 = "C:/Users/Hydur/OneDrive/Desktop/g-28.pdf"
i765ws = "C:/Users/Hydur/OneDrive/Desktop/i-765ws.pdf"
i765 = "C:/Users/Hydur/OneDrive/Desktop/i-765.pdf"
i821d = "C:/Users/Hydur/OneDrive/Desktop/i-821d.pdf"

from PyPDF2 import PdfReader, PdfWriter
from PyPDF2.generic import BooleanObject, NameObject, IndirectObject

def set_need_appearances_writer(writer):
    # See 12.7.2 and 7.7.2 for more information:
    # http://www.adobe.com/content/dam/acom/en/devnet/acrobat/
    #     pdfs/PDF32000_2008.pdf
    try:
        catalog = writer._root_object
        # get the AcroForm tree and add "/NeedAppearances attribute
        if "/AcroForm" not in catalog:
            writer._root_object.update(
                {
                    NameObject("/AcroForm"): IndirectObject(
                        len(writer._objects), 0, writer
                    )
                }
            )

        need_appearances = NameObject("/NeedAppearances")
        writer._root_object["/AcroForm"][need_appearances] = BooleanObject(True)
        return writer

    except Exception as e:
        print("set_need_appearances_writer() catch : ", repr(e))
        return writer

allForms = {g1145, i131, g28, i765ws, i765, i821d}

# Create a set of all the possible form fields 
blankTextFieldsKeys = set()
for form in allForms:
    reader = PdfReader(form, "rb")
    if "/AcroForm" in reader.trailer["/Root"]:
        reader.trailer["/Root"]["/AcroForm"].update(
            {NameObject("/NeedAppearances"): BooleanObject(True)}
        )

    blankTextFields = reader.get_form_text_fields()
    blankTextFieldsKeys = blankTextFields.keys()
    #print(form + ": " + str(blankTextFieldsKeys) + "\n\n")


''' Possible Text Fields in Given Form listed in PossibleTextFieldsConsolidated.txt.
    Get all the text fields and store them as a set to ensure there are no duplicates.
    Sets are determined not by the name of the text field, but by the values they should have,
    e.g., DaytimeTelephoneNumber, MobileNumber1, MobileTelephoneNumber, and MobilePhone should all
    have the same value (the immigrant's phone number) in them.

    Below is the list of text fields that will have the same values; we are consolidating them so that
    the user of this form filler will be asked the minimum number of questions needed to fill out all
    text fields in all the forms:

    Phone Number: MobileNumber1
    Disposition:  Disposition(I-131 If something happened to the re-entry permit)
    
'''


'''pdfFillerDict = dict()
for key in blankTextFieldsKeys:
    
  if "BarCode" not in key:
    value = input("What is your " + key[:-3] + "? ")
    #print("What is your " + key[:-3] + "?")
    pdfFillerDict.update({key: value})
  else:
    pdfFillerDict.update({key: blankTextFields[key]})

writer = PdfWriter()

set_need_appearances_writer(writer)
if "/AcroForm" in writer._root_object:
    writer._root_object["/AcroForm"].update(
        {NameObject("/NeedAppearances"): BooleanObject(True)}
    )

writer.add_page(reader.pages[0])

print(blankTextFields)
print(pdfFillerDict)
writer.update_page_form_field_values(
  writer.pages[0], pdfFillerDict
)

with open("filled-out.pdf", "wb") as output_stream:
    writer.write(output_stream)

output_stream.close()'''